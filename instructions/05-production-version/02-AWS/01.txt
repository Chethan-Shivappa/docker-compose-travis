csh@codenode ~/D/d/v/d/s/0/frontend (dev)> docker build .
Sending build context to Docker daemon  1.573MB
Step 1/8 : FROM node:alpine
 ---> 4d2c046835fc
Step 2/8 : WORKDIR '/app'
 ---> Using cache
 ---> 2578b917ffb9
Step 3/8 : COPY package.json .
 ---> Using cache
 ---> dc815812740d
Step 4/8 : RUN npm install
 ---> Using cache
 ---> 25673088905d
Step 5/8 : COPY . .
 ---> 9179de54d69b
Step 6/8 : RUN npm run build
 ---> Running in 3147388be312

> frontend@0.1.0 build
> react-scripts build

Creating an optimized production build...
Compiled successfully.

File sizes after gzip:

  41.33 KB  build/static/js/2.6bbe1411.chunk.js
  1.62 KB   build/static/js/3.28a467f4.chunk.js
  1.17 KB   build/static/js/runtime-main.6d16ed27.js
  665 B     build/static/js/main.f5fe790a.chunk.js
  556 B     build/static/css/main.a617e044.chunk.css

The project was built assuming it is hosted at /.
You can control this with the homepage field in your package.json.

The build folder is ready to be deployed.
You may serve it with a static server:

  npm install -g serve
  serve -s build

Find out more about deployment here:

  https://cra.link/deployment

Removing intermediate container 3147388be312
 ---> dcee87bf4bd2
Step 7/8 : FROM nginx
 ---> 08b152afcfae
Step 8/8 : COPY --from=0 /app/build /usr/share/nginx/html
 ---> Using cache
 ---> 478b4ae46ca7
Successfully built 478b4ae46ca7
csh@codenode ~/D/d/v/d/s/0/frontend (dev)> 

